// Code generated by MockGen. DO NOT EDIT.
// Source: modules/module.go

// Package mock_modules is a generated GoMock package.
package tests

import (
	"github.com/sneat-co/sneat-go-core/modules"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockModule is a mock of Module interface.
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
}

// MockModuleMockRecorder is the mock recorder for MockModule.
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance.
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockModule) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockModuleMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockModule)(nil).ID))
}

// Register mocks base method.
func (m *MockModule) Register(args modules.ModuleRegistrationArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", args)
}

// Register indicates an expected call of Register.
func (mr *MockModuleMockRecorder) Register(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockModule)(nil).Register), args)
}

// MockRegistrationArgs is a mock of ModuleRegistrationArgs interface.
type MockRegistrationArgs struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationArgsMockRecorder
}

// MockRegistrationArgsMockRecorder is the mock recorder for MockRegistrationArgs.
type MockRegistrationArgsMockRecorder struct {
	mock *MockRegistrationArgs
}

// NewMockRegistrationArgs creates a new mock instance.
func NewMockRegistrationArgs(ctrl *gomock.Controller) *MockRegistrationArgs {
	mock := &MockRegistrationArgs{ctrl: ctrl}
	mock.recorder = &MockRegistrationArgsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrationArgs) EXPECT() *MockRegistrationArgsMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockRegistrationArgs) Handle() modules.HTTPHandleFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(modules.HTTPHandleFunc)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockRegistrationArgsMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockRegistrationArgs)(nil).Handle))
}
