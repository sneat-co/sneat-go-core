// Code generated by MockGen. DO NOT EDIT.
// Source: ./extension (interfaces: Config)
//
// Generated by this command:
//
//	mockgen ./extension Config
//

// Package mock_extension is a generated GoMock package.
package mock_extension

import (
	reflect "reflect"

	coretypes "github.com/sneat-co/sneat-go-core/coretypes"
	extension "github.com/sneat-co/sneat-go-core/extension"
	gomock "go.uber.org/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
	isgomock struct{}
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockConfig) ID() coretypes.ExtID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(coretypes.ExtID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockConfigMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockConfig)(nil).ID))
}

// Register mocks base method.
func (m *MockConfig) Register(args extension.RegistrationArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", args)
}

// Register indicates an expected call of Register.
func (mr *MockConfigMockRecorder) Register(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockConfig)(nil).Register), args)
}
